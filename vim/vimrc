" Vim settings

" Enable mouse
set mouse=a

" File and Window Management 
inoremap <leader>w <Esc>:w<CR>
nnoremap <leader>w :w<CR>

inoremap <leader>q <ESC>:q<CR>
nnoremap <leader>q :q<CR>

inoremap <leader>x <ESC>:x<CR>
nnoremap <leader>x :x<CR>

nnoremap <leader>e :Ex<CR>
nnoremap <leader>t :tabnew<CR>:Ex<CR>
nnoremap <leader>v :vsplit<CR>:w<CR>:Ex<CR>
nnoremap <leader>s :split<CR>:w<CR>:Ex<CR>

" Tab Movement
nnoremap <C-h> :tabprevious<CR>                                                                            
nnoremap <C-l> :tabnext<CR>
nnoremap <C-k> :tabm +1<CR>
nnoremap <C-j> :tabm -1<CR>

" Enable cut and paste from x clipboard
function! ClipboardYank()
  call system('xclip -i -selection clipboard', @@)
endfunction
function! ClipboardPaste()
  let @@ = system('xclip -o -selection clipboard')
endfunction

vnoremap <silent> y y:call ClipboardYank()<cr>
vnoremap <silent> d d:call ClipboardYank()<cr>
nnoremap <silent> p :call ClipboardPaste()<cr>p

" Enable syntax highlighting
syntax on

" Setup line numbers - relative numbering and colors
set number
set relativenumber
:highlight LineNr term=NONE cterm=NONE ctermfg=Blue ctermbg=Grey
:highlight CursorLineNr term=NONE cterm=NONE ctermfg=Red ctermbg=Grey

" Highlight current line
set cursorline
:highlight CursorLine term=NONE cterm=NONE ctermbg=Black

" Don't wrap lines
set nowrap

" Always display status line
set laststatus=2

" Set up status line


" Color theme
set background=dark
color default

" Setup powerline fonts
let g:airline_powerline_fonts=1

" Setup correct tab behaviour
" 1 tab = 4 spaces, always enter spaces when pressing the tab key
set tabstop=4 softtabstop=0 expandtab shiftwidth=4 smarttab

" YouCompleteMe Settings
" Set a golbal ycm_extra_conf file to fall back on if none is found in the
" project directory
let g:ycm_global_ycm_extra_conf = '~/.nvim/ycm_global_conf.py'

" Neomake Settings

" Rename file tabs to show tab number and open splits
" (Based on http://stackoverflow.com/questions/5927952/whats-implementation-of-vims-default-tabline-function)
if exists("+showtabline")
    function! TabLine()
        let tab_line = '%#TabLineFill#' . repeat(' ', &numberwidth)

        let current_tab = 1
        let active_tab = tabpagenr()
        let total_tabs = tabpagenr('$')

        while current_tab <= total_tabs
            let tab = ''
            if current_tab == active_tab
                let tab .= '%#TabLineSel#'
            else
                let tab .= '%#TabLineFill#'
            endif

            let buflist = tabpagebuflist(current_tab)
            let winnr = tabpagewinnr(current_tab)
            let bufnr = buflist[winnr - 1]
            let file = bufname(bufnr)
            let bufmodified = getbufvar(bufnr, '&mod')

            let tab .= printf('%d:%s%s', current_tab, (file == '' ? '[No Name]' : file), (bufmodified ? '*' : ''))
            let tab .= printf(' %%%dX[X]%%X', current_tab)

            let tab_line .= printf('%%%dT%s%%#TabLineSel#', current_tab, tab)

            let current_tab += 1
        endwhile

        let tab_line .= '%T%#TabLineFill#%='
        return tab_line
    endfunction
    set stal=2
    set tabline=%!TabLine()
    set showtabline=2
    highlight link TabNum Special
endif

" =====[ Status Line ]=====

" 256-color terminal colors: https://jonasjacek.github.io/colors/
" colors: <mode>: [[<default_color_fg>, <default_color_bg>], [<modified_default_fg>, <bg>], [<bright_color>, <bg>], [<dim_color>, <bg>]]
let s:statusline_options = {
\   'colors': {
\       'n': [['15', '238'], ['15', '89'], ['0', '3'], ['15', '240']],
\       'i': [['15', '18'], ['15', '18'], ['0', '33'], ['15', '240']],
\       'R': [['15', '18'], ['15', '18'], ['0', '33'], ['15', '240']],
\       'v': [['0', '3'], ['0', '3'], ['0', '172'], ['15', '240']],
\       'V': [['0', '3'], ['0', '3'], ['0', '172'], ['15', '240']],
\       '': [['0', '3'], ['0', '3'], ['0', '172'], ['15', '240']],
\       'c': [['15', '238'], ['15', '89'], ['0', '160'], ['15', '240']]
\   },
\
\   'mode_map': {
\       'n'  : 'NORMAL',
\       'i'  : 'INSERT',
\       'R'  : 'REPLACE',
\       'v'  : 'VISUAL',
\       'V'  : 'V-LINE',
\       '' : 'V-BLOCK',
\       'c'  : 'COMMAND',
\   }
\}

function! StatusLine()
    function! SetColors()
        let colors = get(s:statusline_options.colors, mode(), [['15', '1'], ['0', '9'], ['15', '0']])

        if &mod
            exec printf('hi StatusLine_Default ctermfg=%s ctermbg=%s', colors[1][0], colors[1][1])
        else
            exec printf('hi StatusLine_Default ctermfg=%s ctermbg=%s', colors[0][0], colors[0][1])
        endif

        exec printf('hi StatusLine_Bright ctermfg=%s ctermbg=%s', colors[2][0], colors[2][1])
        exec printf('hi StatusLine_Dim ctermfg=%s ctermbg=%s', colors[3][0], colors[3][1])
	    return '%#StatusLine_Default#'
    endfunction

    function! StatusLineMode()
        let editor_mode = mode()
        return '%#StatusLine_Bright# ' . get(s:statusline_options.mode_map, editor_mode, editor_mode) . ' '
    endfunction

    function! StatusLineFile()
        return '%#StatusLine_Default# ' . '%f %r%m%h%w' . ' '
    endfunction

    function! StatusLineFileType()
        return '%#StatusLine_Dim# ' . '%y' . ' '
    endfunction

    function! StatusLineFilePosition()
        return '%#StatusLine_Bright# ' . '%p%% - %l[%c%V]/%L' . ' '
    endfunction

    let status_line = SetColors()
    let status_line .= StatusLineMode()
    let status_line .= StatusLineFile()
    let status_line .= '%='
    let status_line .= StatusLineFileType()
    let status_line .= StatusLineFilePosition()

    return status_line
endfunction

set statusline=%!StatusLine()
" =====
